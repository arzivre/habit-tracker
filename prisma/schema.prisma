// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
}

model DemoHabit {
  id       String       @id @default(cuid())
  filterId String
  title    String
  records  DemoRecord[]
}

model DemoRecord {
  id          String     @id @default(cuid())
  Demo        DemoHabit? @relation(fields: [demoHabitId], references: [id], onDelete: Cascade)
  demoHabitId String?
  month       String
  date        String
  value       String
}

model Habit {
  id       String   @id @default(cuid())
  User     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String?
  filterId String
  title    String
  records  Record[]
}

model Record {
  id      String  @id @default(cuid())
  Habit   Habit?  @relation(fields: [habitId], references: [id], onDelete: Cascade)
  habitId String?
  month   String
  date    String
  value   String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  habits        Habit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
