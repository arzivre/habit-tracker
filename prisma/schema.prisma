// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DemoHabit {
  id      String       @id @default(cuid())
  records DemoRecord[]
}

model DemoRecord {
  id       String        @id @default(cuid())
  Demo     DemoHabit?    @relation(fields: [demoId], references: [id])
  demoId   String?
  month    DateTime
  title    String
  trackers DemoTracker[]
}

model DemoTracker {
  id           String      @id @default(cuid())
  DemoRecord   DemoRecord? @relation(fields: [demoRecordId], references: [id])
  demoRecordId String?
  date         DateTime
  value        String
}

model Habit {
  id      String   @id @default(cuid())
  User    User?    @relation(fields: [userId], references: [id])
  userId  String?
  title    String
  records Record[]
}

model Record {
  id       String    @id @default(cuid())
  Habit    Habit?    @relation(fields: [habitId], references: [id])
  habitId  String?
  month    DateTime
  trackers Tracker[]
}

model Tracker {
  id       String   @id @default(cuid())
  date     DateTime
  value    String
  Record   Record?  @relation(fields: [recordId], references: [id])
  recordId String?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  habits        Habit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
